// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: websocket.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'

export const protobufPackage = 'fleet.proto.message'

export enum MessageType {
  REQUEST = 0,
  RESPONSE = 1,
  UNRECOGNIZED = -1,
}

export function messageTypeFromJSON(object: any): MessageType {
  switch (object) {
    case 0:
    case 'REQUEST':
      return MessageType.REQUEST
    case 1:
    case 'RESPONSE':
      return MessageType.RESPONSE
    case -1:
    case 'UNRECOGNIZED':
    default:
      return MessageType.UNRECOGNIZED
  }
}

export function messageTypeToJSON(object: MessageType): string {
  switch (object) {
    case MessageType.REQUEST:
      return 'REQUEST'
    case MessageType.RESPONSE:
      return 'RESPONSE'
    case MessageType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED'
  }
}

export interface Message {
  type: MessageType
  address?: string | undefined
  timestamp: number
  data: Uint8Array
  signature?: Uint8Array | undefined
}

export interface BatchMessage {
  /** A list of Message instances */
  messages: Message[]
}

export interface State {
  type: string
  attributes: StateAttribute[]
}

export interface StateAttribute {
  key: string
  value: string
}

export interface BatchState {
  states: State[]
}

function createBaseMessage(): Message {
  return {
    type: 0,
    address: undefined,
    timestamp: 0,
    data: new Uint8Array(0),
    signature: undefined,
  }
}

export const Message: MessageFns<Message> = {
  encode(
    message: Message,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type)
    }
    if (message.address !== undefined) {
      writer.uint32(18).string(message.address)
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).int64(message.timestamp)
    }
    if (message.data.length !== 0) {
      writer.uint32(34).bytes(message.data)
    }
    if (message.signature !== undefined) {
      writer.uint32(42).bytes(message.signature)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseMessage()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.type = reader.int32() as any
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.address = reader.string()
          continue
        }
        case 3: {
          if (tag !== 24) {
            break
          }

          message.timestamp = longToNumber(reader.int64())
          continue
        }
        case 4: {
          if (tag !== 34) {
            break
          }

          message.data = reader.bytes()
          continue
        }
        case 5: {
          if (tag !== 42) {
            break
          }

          message.signature = reader.bytes()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): Message {
    return {
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      address: isSet(object.address)
        ? globalThis.String(object.address)
        : undefined,
      timestamp: isSet(object.timestamp)
        ? globalThis.Number(object.timestamp)
        : 0,
      data: isSet(object.data)
        ? bytesFromBase64(object.data)
        : new Uint8Array(0),
      signature: isSet(object.signature)
        ? bytesFromBase64(object.signature)
        : undefined,
    }
  },

  toJSON(message: Message): unknown {
    const obj: any = {}
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type)
    }
    if (message.address !== undefined) {
      obj.address = message.address
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp)
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data)
    }
    if (message.signature !== undefined) {
      obj.signature = base64FromBytes(message.signature)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage()
    message.type = object.type ?? 0
    message.address = object.address ?? undefined
    message.timestamp = object.timestamp ?? 0
    message.data = object.data ?? new Uint8Array(0)
    message.signature = object.signature ?? undefined
    return message
  },
}

function createBaseBatchMessage(): BatchMessage {
  return { messages: [] }
}

export const BatchMessage: MessageFns<BatchMessage> = {
  encode(
    message: BatchMessage,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    for (const v of message.messages) {
      Message.encode(v!, writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchMessage {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseBatchMessage()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.messages.push(Message.decode(reader, reader.uint32()))
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): BatchMessage {
    return {
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => Message.fromJSON(e))
        : [],
    }
  },

  toJSON(message: BatchMessage): unknown {
    const obj: any = {}
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => Message.toJSON(e))
    }
    return obj
  },

  create<I extends Exact<DeepPartial<BatchMessage>, I>>(
    base?: I
  ): BatchMessage {
    return BatchMessage.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<BatchMessage>, I>>(
    object: I
  ): BatchMessage {
    const message = createBaseBatchMessage()
    message.messages = object.messages?.map((e) => Message.fromPartial(e)) || []
    return message
  },
}

function createBaseState(): State {
  return { type: '', attributes: [] }
}

export const State: MessageFns<State> = {
  encode(
    message: State,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.type !== '') {
      writer.uint32(10).string(message.type)
    }
    for (const v of message.attributes) {
      StateAttribute.encode(v!, writer.uint32(18).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): State {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseState()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.type = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.attributes.push(
            StateAttribute.decode(reader, reader.uint32())
          )
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): State {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : '',
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => StateAttribute.fromJSON(e))
        : [],
    }
  },

  toJSON(message: State): unknown {
    const obj: any = {}
    if (message.type !== '') {
      obj.type = message.type
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => StateAttribute.toJSON(e))
    }
    return obj
  },

  create<I extends Exact<DeepPartial<State>, I>>(base?: I): State {
    return State.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<State>, I>>(object: I): State {
    const message = createBaseState()
    message.type = object.type ?? ''
    message.attributes =
      object.attributes?.map((e) => StateAttribute.fromPartial(e)) || []
    return message
  },
}

function createBaseStateAttribute(): StateAttribute {
  return { key: '', value: '' }
}

export const StateAttribute: MessageFns<StateAttribute> = {
  encode(
    message: StateAttribute,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.key !== '') {
      writer.uint32(10).string(message.key)
    }
    if (message.value !== '') {
      writer.uint32(18).string(message.value)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateAttribute {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseStateAttribute()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.key = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.value = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): StateAttribute {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : '',
      value: isSet(object.value) ? globalThis.String(object.value) : '',
    }
  },

  toJSON(message: StateAttribute): unknown {
    const obj: any = {}
    if (message.key !== '') {
      obj.key = message.key
    }
    if (message.value !== '') {
      obj.value = message.value
    }
    return obj
  },

  create<I extends Exact<DeepPartial<StateAttribute>, I>>(
    base?: I
  ): StateAttribute {
    return StateAttribute.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<StateAttribute>, I>>(
    object: I
  ): StateAttribute {
    const message = createBaseStateAttribute()
    message.key = object.key ?? ''
    message.value = object.value ?? ''
    return message
  },
}

function createBaseBatchState(): BatchState {
  return { states: [] }
}

export const BatchState: MessageFns<BatchState> = {
  encode(
    message: BatchState,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    for (const v of message.states) {
      State.encode(v!, writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchState {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseBatchState()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.states.push(State.decode(reader, reader.uint32()))
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): BatchState {
    return {
      states: globalThis.Array.isArray(object?.states)
        ? object.states.map((e: any) => State.fromJSON(e))
        : [],
    }
  },

  toJSON(message: BatchState): unknown {
    const obj: any = {}
    if (message.states?.length) {
      obj.states = message.states.map((e) => State.toJSON(e))
    }
    return obj
  },

  create<I extends Exact<DeepPartial<BatchState>, I>>(base?: I): BatchState {
    return BatchState.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<BatchState>, I>>(
    object: I
  ): BatchState {
    const message = createBaseBatchState()
    message.states = object.states?.map((e) => State.fromPartial(e)) || []
    return message
  },
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'))
  } else {
    const bin = globalThis.atob(b64)
    const arr = new Uint8Array(bin.length)
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i)
    }
    return arr
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString('base64')
  } else {
    const bin: string[] = []
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte))
    })
    return globalThis.btoa(bin.join(''))
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never
    }

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString())
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER')
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER')
  }
  return num
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
